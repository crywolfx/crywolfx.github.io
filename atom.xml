<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wxin&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://crywolfx.github.io/"/>
  <updated>2022-07-26T06:26:20.357Z</updated>
  <id>http://crywolfx.github.io/</id>
  
  <author>
    <name>Alex Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://crywolfx.github.io/2022/07/26/hello-world/"/>
    <id>http://crywolfx.github.io/2022/07/26/hello-world/</id>
    <published>2022-07-26T06:26:20.357Z</published>
    <updated>2022-07-26T06:26:20.357Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for
      
    
    </summary>
    
      <category term="test" scheme="http://crywolfx.github.io/categories/test/"/>
    
    
      <category term="test" scheme="http://crywolfx.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>v2ray</title>
    <link href="http://crywolfx.github.io/2019/10/21/v2ray/"/>
    <id>http://crywolfx.github.io/2019/10/21/v2ray/</id>
    <published>2019-10-21T10:31:31.000Z</published>
    <updated>2022-07-26T06:32:02.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="v2ray-配置记录"><a href="#v2ray-配置记录" class="headerlink" title="v2ray 配置记录"></a>v2ray 配置记录</h1><h2 id="v2ray-nginx-tls"><a href="#v2ray-nginx-tls" class="headerlink" title="v2ray + nginx + tls"></a>v2ray + nginx + tls</h2><h3 id="v2ray安装"><a href="#v2ray安装" class="headerlink" title="v2ray安装"></a>v2ray安装</h3><blockquote><p><a href="https://blog.sprov.xyz/2019/02/04/v2ray-simple-use/">v2ray新手搭建使用教程</a>   </p></blockquote><h4 id="安装curl和vim"><a href="#安装curl和vim" class="headerlink" title="安装curl和vim"></a>安装curl和vim</h4><ol><li><p>RedHat系列：Redhat、Centos、Fedora等 <code>yum install curl vim -y</code>   </p></li><li><p>Debian系列：Debian、Ubuntu等 <code>apt-get install curl vim -y</code></p></li></ol><h4 id="v2ray脚本安装"><a href="#v2ray脚本安装" class="headerlink" title="v2ray脚本安装"></a>v2ray脚本安装</h4><p><code>&lt;(curl -L -s https://install.direct/go.sh)</code>  </p><h4 id="v2ray命令执行"><a href="#v2ray命令执行" class="headerlink" title="v2ray命令执行"></a>v2ray命令执行</h4><ol><li>启动：<code>systemctl start v2ray</code></li><li>检测：<code>systemctl status v2ray</code></li><li>失败尝试：<code>service v2ray start service v2ray status</code></li></ol><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h4><blockquote><p>如果有重要资料请开启对应端口</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld</span><br><span class="line">systemctl disable firewalld</span><br><span class="line"> </span><br><span class="line">servcie iptables stop</span><br><span class="line">chkconfig iptables off</span><br><span class="line"> </span><br><span class="line">ufw disable</span><br></pre></td></tr></table></figure><h3 id="bbr安装"><a href="#bbr安装" class="headerlink" title="bbr安装"></a>bbr安装</h3><blockquote><p><a href="https://blog.sprov.xyz/2019/02/04/bbr-tcp-faster/">谷歌BBR</a> google cloud vm不需要安装，默认就包含bbr   </p></blockquote><h4 id="安装wget"><a href="#安装wget" class="headerlink" title="安装wget"></a>安装wget</h4><ul><li>centos <code>yum install wget -y</code></li><li>debian <code>apt-get install wget -y</code></li></ul><h4 id="安装bbr"><a href="#安装bbr" class="headerlink" title="安装bbr"></a>安装bbr</h4><p><code>wget --no-check-certificate https://github.com/sprov065/blog/raw/master/bbr.sh &amp;&amp; bash bbr.sh</code> </p><blockquote><p>秋水逸冰版本<br><code>wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh &amp;&amp; chmod +x bbr.sh &amp;&amp; ./bbr.sh</code> </p></blockquote><h4 id="检测是否安装成功"><a href="#检测是否安装成功" class="headerlink" title="检测是否安装成功"></a>检测是否安装成功</h4><p><code>lsmod | grep bbr</code></p><h3 id="域名配置"><a href="#域名配置" class="headerlink" title="域名配置"></a>域名配置</h3><ul><li>域名解析</li><li>申请ssl证书</li><li>上传ssl证书至vps</li></ul><h3 id="配置v2ray"><a href="#配置v2ray" class="headerlink" title="配置v2ray"></a>配置v2ray</h3><ul><li><p>ui面板配置<a href="https://blog.sprov.xyz/2019/08/03/v2-ui/">v2-ui</a>   </p></li><li><p>自定义json配置<a href="https://blog.sprov.xyz/2019/02/06/v2ray-advance-1-config/">v2ray配置</a>    </p></li><li><p>访问: <a href="http://example.com:65432/">http://example.com:65432</a> 打开面板</p></li></ul><h3 id="nginx安装"><a href="#nginx安装" class="headerlink" title="nginx安装"></a>nginx安装</h3><blockquote><p>debian9   </p></blockquote><h4 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update </span><br><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><h4 id="nginx命令"><a href="#nginx命令" class="headerlink" title="nginx命令"></a>nginx命令</h4><ul><li>启动: systemctl start nginx</li><li>停止: systemctl stop nginx</li><li>重启: systemctl restart nginx</li><li>热重载: systemctl reload nginx</li><li>开机自启动: systemctl enable nginx</li><li>开机不自启动: systemctl disable nginx</li></ul><h4 id="配置config"><a href="#配置config" class="headerlink" title="配置config"></a>配置config</h4><p><code>vi /etc/nginx/sites-available/example.com</code>  </p><h5 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h5><pre><code>    server&#123;        listen 80;        server_name example.com;        return 301 https://$server_name$request_uri; #http重定向至https    &#125;    server &#123;        listen 443 ssl http2 default_server;        listen [::]:443 ssl http2 default_server;        server_name example.com www.example.com;        ssl_certificate /etc/nginx/ssl/example.com.crt;  #ssl证书        ssl_certificate_key /etc/nginx/ssl/example.com.key; #ssl证书        root /var/www/html;  #根目录        index index.html index.htm index.nginx-debian.html index.php;        location /ray &#123;  #客户端配置需要和此目录保持一致            proxy_redirect off;            proxy_pass http://127.0.0.1:4443;   #端口需要和v2ray配置的端口一致            proxy_http_version 1.1;            proxy_set_header Upgrade $http_upgrade;            proxy_set_header Connection &quot;upgrade&quot;;            proxy_set_header Host $http_host;        &#125;    &#125;</code></pre><ul><li>执行<code>nginx -t</code>检测配置是否正确</li><li><code>sudo ln -s /etc/nginx/sites-available/example.com /etc/nginx/sites-enabled/</code> 将该nginx配置文件软链到sites-enabled目录下</li><li>执行<code>systemctl reload nginx</code>使得配置生效</li></ul><h4 id="配置根目录伪装网站"><a href="#配置根目录伪装网站" class="headerlink" title="配置根目录伪装网站"></a>配置根目录伪装网站</h4><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><ul><li><a href="https://github.com/2dust/v2rayN/releases">windows</a></li><li><a href="https://github.com/Cenmrev/V2RayX/releases">mac</a></li><li><a href="https://github.com/2dust/v2rayNG/releases">android</a></li><li>ios(i2ray、Shadowrocket、Kitsunebi)</li></ul><p>test</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;v2ray-配置记录&quot;&gt;&lt;a href=&quot;#v2ray-配置记录&quot; class=&quot;headerlink&quot; title=&quot;v2ray 配置记录&quot;&gt;&lt;/a&gt;v2ray 配置记录&lt;/h1&gt;&lt;h2 id=&quot;v2ray-nginx-tls&quot;&gt;&lt;a href=&quot;#v2ray-
      
    
    </summary>
    
    
      <category term="科学上网" scheme="http://crywolfx.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>ssr</title>
    <link href="http://crywolfx.github.io/2019/10/21/ss/"/>
    <id>http://crywolfx.github.io/2019/10/21/ss/</id>
    <published>2019-10-21T10:31:31.000Z</published>
    <updated>2022-07-26T06:26:20.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ssr-配置记录"><a href="#ssr-配置记录" class="headerlink" title="ssr 配置记录"></a>ssr 配置记录</h1><h2 id="锐速"><a href="#锐速" class="headerlink" title="锐速"></a>锐速</h2><p><code>wget -N --no-check-certificate https://raw.githubusercontent.com/crywolfx/science-ss/master/ss/serverspeeder.sh &amp;&amp; chmod +x serverspeeder.sh &amp;&amp; bash serverspeeder.sh</code></p><h2 id="bbr"><a href="#bbr" class="headerlink" title="bbr"></a>bbr</h2><p><code>wget -N --no-check-certificate  https://raw.githubusercontent.com/crywolfx/science-ss/master/ss/bbr.sh &amp;&amp; &amp;&amp; chmod +x bbr.sh &amp;&amp; bash bbr.sh</code></p><h2 id="bbr魔改"><a href="#bbr魔改" class="headerlink" title="bbr魔改"></a>bbr魔改</h2><p><code>wget -N --no-check-certificate  https://raw.githubusercontent.com/crywolfx/science-ss/master/ss/bbr_diy.sh &amp;&amp; &amp;&amp; chmod +x bbr_diy.sh &amp;&amp; bash bbr_diy.sh</code></p><h2 id="多合一"><a href="#多合一" class="headerlink" title="多合一"></a>多合一</h2><p><code>wget -N --no-check-certificate  https://raw.githubusercontent.com/crywolfx/science-ss/master/ss/all.sh &amp;&amp; &amp;&amp; chmod +x all.sh &amp;&amp; bash all.sh</code></p><h2 id="ssr"><a href="#ssr" class="headerlink" title="ssr"></a>ssr</h2><p><code>wget –no-check-certificate https://raw.githubusercontent.com/crywolfx/science-ss/master/ss/shadowsocksR.sh &amp;&amp; chmod +x shadowsocksR.sh &amp;&amp; ./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ssr-配置记录&quot;&gt;&lt;a href=&quot;#ssr-配置记录&quot; class=&quot;headerlink&quot; title=&quot;ssr 配置记录&quot;&gt;&lt;/a&gt;ssr 配置记录&lt;/h1&gt;&lt;h2 id=&quot;锐速&quot;&gt;&lt;a href=&quot;#锐速&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
      <category term="科学上网" scheme="http://crywolfx.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>js基础总结</title>
    <link href="http://crywolfx.github.io/2019/07/26/%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://crywolfx.github.io/2019/07/26/基础总结/</id>
    <published>2019-07-26T02:54:53.000Z</published>
    <updated>2022-07-26T06:26:20.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端基础总结"><a href="#前端基础总结" class="headerlink" title="前端基础总结"></a>前端基础总结</h2><p>执行上下文&#x2F;作用域链&#x2F;闭包</p><h3 id="1-执行上下文"><a href="#1-执行上下文" class="headerlink" title="1. 执行上下文"></a>1. 执行上下文</h3><ol><li><p>JavaScript 中有三种执行上下文类型。</p><ul><li><strong>全局执行上下文</strong> — 这是默认或者说基础的上下文，任何不在函数内部的代码都在全局上下文中。它会执行两件事：创建一个全局的 window 对象（浏览器的情况下），并且设置 <code>this</code> 的值等于这个全局对象。一个程序中只会有一个全局执行上下文。</li><li><strong>函数执行上下文</strong> — 每当一个函数被调用时, 都会为该函数创建一个新的上下文。每个函数都有它自己的执行上下文，不过是在函数被调用时创建的。函数上下文可以有任意多个。每当一个新的执行上下文被创建，它会按定义的顺序（将在后文讨论）执行一系列步骤。</li><li><strong>Eval 函数执行上下文</strong> — 执行在 <code>eval</code> 函数内部的代码也会有它属于自己的执行上下文，但由于 JavaScript 开发者并不经常使用 <code>eval</code>，所以在这里我不会讨论它。</li></ul></li><li><p>创建执行上下文</p><ul><li><p>分为两个阶段：<code>创建阶段</code>和<code>执行阶段</code></p></li><li><p>创建阶段包含</p><ul><li><strong>this</strong> 值的决定，即我们所熟知的 <strong>This 绑定</strong>。</li><li>作用域链(Scope chain)&#x2F; 创建<strong>词法环境</strong>组件。</li><li>变量对象(Variable object，VO) &#x2F; 创建<strong>变量环境</strong>组件。</li></ul></li><li><p>在全局执行上下文中，<code>this</code> 的值指向全局对象。(在浏览器中，<code>this</code>引用 Window 对象)。</p><p>在函数执行上下文中，<code>this</code> 的值取决于该函数是如何被调用的。如果它被一个引用对象调用，那么 <code>this</code> 会被设置成那个对象，否则 <code>this</code> 的值被设置为全局对象或者 <code>undefined</code>（在严格模式下）。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = &#123;</span><br><span class="line">  <span class="attr">baz</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="title function_">baz</span>();   <span class="comment">// &#x27;this&#x27; 引用 &#x27;foo&#x27;, 因为 &#x27;baz&#x27; 被</span></span><br><span class="line">             <span class="comment">// 对象 &#x27;foo&#x27; 调用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> bar = foo.<span class="property">baz</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>();       <span class="comment">// &#x27;this&#x27; 指向全局 window 对象，因为</span></span><br><span class="line">             <span class="comment">// 没有指定引用对象</span></span><br></pre></td></tr></table></figure></li><li><p>遇到函数执行的时候，就会创建一个执行上下文</p></li></ul></li></ol><h3 id="2作用域"><a href="#2作用域" class="headerlink" title="2作用域"></a>2作用域</h3><p>JavaScript 采用的是词法作用域（静态作用域），函数的作用域在函数定义的时候就决定了。</p><ul><li><p>函数提升是整个代码块提升到它所在的作用域的最开始执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">foo</span>(); <span class="comment">//1</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> foo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">foo = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">/* result</span></span><br><span class="line"><span class="comment">1</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>进入执行上下文时，首先会处理函数声明，其次会处理变量声明，如果变量名称跟已经声明的形式参数或函数相同，则变量声明不会干扰已经存在的这类属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">[Function: foo]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="3-this-x2F-call-x2F-apply-x2F-bind"><a href="#3-this-x2F-call-x2F-apply-x2F-bind" class="headerlink" title="3. this&#x2F;call&#x2F;apply&#x2F;bind"></a>3. this&#x2F;call&#x2F;apply&#x2F;bind</h3><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>简单理解:一般指调用的对象，从ECMAScript角度理解较为复杂。</p><p>ECMAScript 的类型分为语言类型和规范类型。</p><ul><li><strong>语言类型</strong> 是开发者直接使用 ECMAScript 可以操作的。其实就是我们常说的Undefined, Null, Boolean, String, Number, 和 Object。</li></ul><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// call实现</span></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_callEs5</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    context = context !== <span class="literal">undefined</span> &amp;&amp; context !== <span class="literal">null</span> ? context : (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="variable language_">global</span>);</span><br><span class="line">    context.<span class="property">__fn__</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i ++) &#123;</span><br><span class="line">        args.<span class="title function_">push</span>(<span class="string">&#x27;arguments[&#x27;</span>+ i +<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;context.__fn__(&#x27;</span> + args +<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">__fn__</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_callEs6</span> = <span class="keyword">function</span> (<span class="params">context, ...args</span>) &#123;</span><br><span class="line">    context = context !== <span class="literal">undefined</span> &amp;&amp; context !== <span class="literal">null</span> ? context : (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span> ? <span class="variable language_">window</span> : <span class="variable language_">global</span>);</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">    context[key] = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> result = context[key](...args);</span><br><span class="line">    <span class="keyword">delete</span> context[key];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">a</span> (name, age) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>, name, age);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;b-name&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;type-b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">value = <span class="string">&#x27;global-value&#x27;</span>;</span><br><span class="line">type = <span class="string">&#x27;global-type&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;_callEs5&#x27;</span>, a.<span class="title function_">_callEs5</span>(b, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;13&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;_callEs6&#x27;</span>, a.<span class="title function_">_callEs6</span>(<span class="literal">null</span>, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;13&#x27;</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;call&#x27;</span>, a.<span class="title function_">call</span>(<span class="literal">null</span>, <span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;13&#x27;</span>));</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// apply</span></span><br><span class="line"><span class="comment">// es5</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_applyEs5</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    context = context !== <span class="literal">undefined</span> &amp;&amp; context !== <span class="literal">null</span> ? context : (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="literal">undefined</span> ? <span class="variable language_">window</span> : <span class="variable language_">global</span>);</span><br><span class="line">    context.<span class="property">__fn__</span> = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> params = <span class="variable language_">arguments</span>[<span class="number">1</span>] || [];</span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; params.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        args.<span class="title function_">push</span>(<span class="string">&#x27;params[&#x27;</span>+ i +<span class="string">&#x27;]&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">&#x27;context.__fn__(&#x27;</span> + args +<span class="string">&#x27;)&#x27;</span>);</span><br><span class="line">    <span class="keyword">delete</span> context.<span class="property">__fn__</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// es6</span></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_applyEs6</span> = <span class="keyword">function</span> (<span class="params">context, args</span>) &#123;</span><br><span class="line">    context = context !== <span class="literal">undefined</span> &amp;&amp; context !== <span class="literal">null</span> ? context : (<span class="keyword">typeof</span> <span class="variable language_">window</span> !== <span class="string">&#x27;undefined&#x27;</span> ? <span class="variable language_">window</span> : <span class="variable language_">global</span>);</span><br><span class="line">    <span class="keyword">const</span> key = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>);</span><br><span class="line">    context[key] = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> result = context[key](...args);</span><br><span class="line">    <span class="keyword">delete</span> context[key];</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">c</span> (name, age) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>, name, age);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">type</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> d = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="string">&#x27;b-name&#x27;</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;type-b&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">value = <span class="string">&#x27;global-value&#x27;</span>;</span><br><span class="line">type = <span class="string">&#x27;global-type&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;_applyEs5&#x27;</span>, c.<span class="title function_">_applyEs5</span>(d, [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;13&#x27;</span>]));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;_applyEs6&#x27;</span>, c.<span class="title function_">_applyEs6</span>(<span class="literal">null</span>, [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;13&#x27;</span>]));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;apply&#x27;</span>, c.<span class="title function_">apply</span>(<span class="literal">null</span>, [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;13&#x27;</span>]));</span><br></pre></td></tr></table></figure><p><code>call</code>和<code>apply</code>作用上把原函数给调用的对象使用，并且把this指向调用的对象。</p><p>如果原函数是构造函数，其构造属性也会挂载到参数对象上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span> () &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="string">&#x27;345&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = &#123;&#125;;</span><br><span class="line">A.<span class="title function_">call</span>(c)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);  <span class="comment">// &#123; name: &#x27;123&#x27; &#125;, 如果原c上有name这个属性。会被覆盖</span></span><br></pre></td></tr></table></figure><p>实际模拟实现：把函数隐示的挂载到传的参数对象上，执行完毕后删除挂载的函数。</p><h4 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// bind</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_bindEs5</span> = <span class="keyword">function</span> (<span class="params">context</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">var</span> preArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>) || [];</span><br><span class="line">    <span class="keyword">var</span> fNOP = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Fuc</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> agrs = preArgs.<span class="title function_">concat</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>));</span><br><span class="line">        <span class="keyword">return</span> _this.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Fuc</span> ? <span class="variable language_">this</span> : context, agrs)</span><br><span class="line">    &#125;</span><br><span class="line">    fNOP.<span class="property"><span class="keyword">prototype</span></span> = <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="title class_">Fuc</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title function_">fNOP</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Fuc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_bindEs6</span> = <span class="keyword">function</span> (<span class="params">context, ...agrs</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> _this = <span class="variable language_">this</span>;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Fn</span> = <span class="keyword">function</span> (<span class="params">agrs2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> _this.<span class="title function_">apply</span>(<span class="variable language_">this</span> <span class="keyword">instanceof</span> <span class="title class_">Fn</span> ? <span class="variable language_">this</span> : context, [...agrs, ...agrs2]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">Fn</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Fn</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">habit</span> = <span class="string">&#x27;shopping&#x27;</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">bar</span> = <span class="string">&#x27;bar&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">value</span>);  <span class="comment">// undefined 之所以返回undefined是因为 后面实例化改变了this的指向，指向了当前对象</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">bar</span>);  <span class="comment">// bar  </span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">// daisy</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(age);  <span class="comment">// 18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bar.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">friend</span> = <span class="string">&#x27;kevin&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bindFoo = bar.<span class="title function_">_bindEs5</span>(foo, <span class="string">&#x27;daisy&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title function_">bindFoo</span>(<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;************&quot;</span>); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">habit</span>);  <span class="comment">// shopping</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">friend</span>); <span class="comment">// kevin</span></span><br></pre></td></tr></table></figure><p><code>bind</code>在当做对象实例化的时候，this会指向当前实例化的对象。</p><h3 id="4-原型-x2F-继承-x2F-new"><a href="#4-原型-x2F-继承-x2F-new" class="headerlink" title="4.原型&#x2F;继承&#x2F;new"></a>4.原型&#x2F;继承&#x2F;new</h3><p><img src="https://s5.mogucdn.com/mlcdn/c45406/200423_759ekbg056g58dib458dj88211kl7_952x870.png" alt="image-20200423173822943"></p><p><img src="https://s5.mogucdn.com/mlcdn/c45406/200425_65f0b4ce7j5779505c6j5h70a4bbd_1318x558.png" alt="image-20200425151245873"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);  <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span> === person.<span class="property">constructor</span>); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 顺便学习一个ES5的方法,可以获得对象的原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person) === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>当读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就去找原型的原型，一直找到最顶层为止。</p><p><code>__proto__</code></p><p>绝大部分浏览器都支持这个非标准的方法访问原型，然而它并不存在于 Person.prototype 中，实际上，它是来自于 Object.prototype ，与其说是一个属性，不如说是一个 getter&#x2F;setter，当使用 <code>obj.__proto__</code> 时，可以理解成返回了 Object.getPrototypeOf(obj)。其指向了构造函数的<code>prototype</code></p><p><code>prototype</code></p><p>创建的每个函数都有<code>prototype</code>，这个属性是一个指针，指向构造函数的原型对象。</p><h4 id="构造方法、原型方法、类方法"><a href="#构造方法、原型方法、类方法" class="headerlink" title="构造方法、原型方法、类方法"></a>构造方法、原型方法、类方法</h4><ul><li>类方法实际上就是静态方法，不需要实例化便可以调用</li><li>构造方法需要实例化才能调用，每次实例化都会生成一份，会额外占用内存</li><li>原型方法需要实例化才能调用，每个实例化的对象都共用同一个原型链上的方法</li></ul><h4 id="new，实例化实现"><a href="#new，实例化实现" class="headerlink" title="new，实例化实现"></a>new，实例化实现</h4><p>模拟实现：创建一个空实例对象，把原构造函数<code>Constructor</code>的原型<code>prototype</code>挂载到空对象的<code>__proto__</code>属性上，这样实例对象(<code>obj</code>)就可以访问到原型属性。然后通过<code>call</code>或者<code>apply</code>修改<code>this</code>的指向到新建的对象，这样实例对象(<code>obj</code>)就可以访问到构造属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">objectFactoryEs5</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 实例化空对象</span></span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(),</span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    <span class="title class_">Constructor</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">shift</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="comment">// 复制原型方法</span></span><br><span class="line">    obj.<span class="property">__proto__</span> = <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="comment">// 新的this全部指向 obj，并且把之前的参数传递过来</span></span><br><span class="line">    <span class="keyword">var</span> ret = <span class="title class_">Constructor</span>.<span class="title function_">apply</span>(obj, <span class="variable language_">arguments</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">&#x27;object&#x27;</span> ? ret || obj : obj;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">objectFactoryEs6</span>(<span class="params">Constructor, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    obj.<span class="property">__proto__</span> = <span class="title class_">Constructor</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">    <span class="keyword">const</span> ret = <span class="title class_">Constructor</span>.<span class="title function_">call</span>(obj, ...args);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">typeof</span> ret === <span class="string">&#x27;object&#x27;</span> ? ret || obj : obj;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><h5 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 组合继承</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name, age) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;new Person&quot;</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">test</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params">food</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; is eating &#x27;</span> + food);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">test</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span> (name, age, study) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">study</span> = study;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一步会实例化一遍 Person</span></span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一步还会实例化一遍 Person，因为内部为了继承Person的构造属性，用了call进行调用</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;zz&#x27;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="组合继承优化"><a href="#组合继承优化" class="headerlink" title="组合继承优化"></a>组合继承优化</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 复合继承优化，解决实例化两边父类的问题</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span> (name, age) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">test</span> = <span class="string">&#x27;eat 测试输出代码&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params">food</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&#x27; 在吃 &#x27;</span> + food);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">test</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child</span> (name, age, study) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">study</span> = study;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Child2</span> (name, age) &#123;</span><br><span class="line">    <span class="title class_">Person</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name, age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">extendsPrototype</span> (<span class="title class_">Child</span>, <span class="title class_">Parent</span>) &#123;</span><br><span class="line">  <span class="comment">// 方案①</span></span><br><span class="line">    <span class="comment">// var Fun = function () &#123; console.log(&quot;new Fun &quot;)&#125;;</span></span><br><span class="line">    <span class="comment">// Fun.prototype = Parent.prototype;</span></span><br><span class="line">    <span class="comment">// Child.prototype = new Fun();  </span></span><br><span class="line">    <span class="comment">// 方案②</span></span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Parent</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line">  <span class="comment">// 如果直接写 Child.prototype = Parent.prototype;的话，原型上的所有方法都会被子类重写。</span></span><br><span class="line">    <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Child</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Child</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这一步会实例化一遍 Person</span></span><br><span class="line"><span class="title class_">Child</span> = <span class="title function_">extendsPrototype</span>(<span class="title class_">Child</span>, <span class="title class_">Person</span>);</span><br><span class="line"><span class="title class_">Child2</span> = <span class="title function_">extendsPrototype</span>(<span class="title class_">Child2</span>, <span class="title class_">Person</span>);</span><br><span class="line"><span class="title class_">Child2</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;eat 方法 被&quot;</span> + <span class="variable language_">this</span>.<span class="property">name</span> +<span class="string">&quot;重写&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="title class_">Child</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="title class_">Child2</span>(<span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;19&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;父亲&#x27;</span>,<span class="string">&#x27;45&#x27;</span>);</span><br><span class="line">a.<span class="title function_">eat</span>(<span class="string">&#x27;汉堡&#x27;</span>); <span class="comment">// 张三 在吃 汉堡</span></span><br><span class="line">b.<span class="title function_">eat</span>();  <span class="comment">// eat 方法 被李四重写</span></span><br><span class="line">c.<span class="title function_">eat</span>(<span class="string">&#x27;肉&#x27;</span>); <span class="comment">// 父亲 在吃 肉</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>); <span class="comment">// Child </span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">__proto__</span>.<span class="property">__proto__</span> === <span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Child</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="5-Promise"><a href="#5-Promise" class="headerlink" title="5. Promise"></a>5. Promise</h3><h3 id="6-深浅拷贝"><a href="#6-深浅拷贝" class="headerlink" title="6. 深浅拷贝"></a>6. 深浅拷贝</h3><h3 id="7-事件机制-x2F-Event-Loop"><a href="#7-事件机制-x2F-Event-Loop" class="headerlink" title="7. 事件机制&#x2F;Event Loop"></a>7. 事件机制&#x2F;Event Loop</h3><h3 id="8-闭包"><a href="#8-闭包" class="headerlink" title="8. 闭包"></a>8. 闭包</h3><ul><li><p>概念</p><ul><li>即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回）</li><li>在代码中引用了自由变量</li></ul><p>常见函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">a</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        c++;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(c)</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="title function_">a</span>();</span><br><span class="line"><span class="title function_">b</span>(); <span class="comment">// 2</span></span><br><span class="line"><span class="title function_">b</span>(); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();  <span class="comment">// 3</span></span><br><span class="line">data[<span class="number">1</span>]();  <span class="comment">// 3</span></span><br><span class="line">data[<span class="number">2</span>]();  <span class="comment">// 3 </span></span><br><span class="line"><span class="comment">// 在执行data[0]()的时候，上方的for循环已经结束了，i已经都是3，data[0]()的作用链域在全局。var没有局部作用域，所以会获取到3。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 闭包修改</span></span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  data[i] = (<span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">  &#125;;</span><br><span class="line">  &#125;)(i)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data[<span class="number">0</span>]();  <span class="comment">// 1</span></span><br><span class="line">data[<span class="number">1</span>]();  <span class="comment">// 2</span></span><br><span class="line">data[<span class="number">2</span>]();  <span class="comment">// 3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// babel做的操作</span></span><br><span class="line"><span class="keyword">var</span> data = [];</span><br><span class="line"><span class="keyword">var</span> _loop_1 = <span class="keyword">function</span> (<span class="params">i</span>) &#123;</span><br><span class="line">    data[i] = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(i);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">    <span class="title function_">_loop_1</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">data[<span class="number">0</span>]();  <span class="comment">// 0</span></span><br><span class="line">data[<span class="number">1</span>]();  <span class="comment">// 1</span></span><br><span class="line">data[<span class="number">2</span>]();  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际上是生成一个块级作用域，传递了出去。</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="9-按值传递"><a href="#9-按值传递" class="headerlink" title="9.按值传递"></a>9.按值传递</h3><p>在一个函数进行调用的时候，传递的参数是按照值进行传递的。对于基本类型，把值直接传了进去。但是对于引用类型，传递的实际上是地址。如果在函数中修改了引用类型的某个属性，就会把这个地址所对应的值修改。如果在函数中直接把这个引用类型的值完全都修改了。就是重新拷贝赋了一个新值，不会对原值产生影响。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">v</span>) &#123;</span><br><span class="line">    v = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(v); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(value);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value) <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    o.<span class="property">value</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o.<span class="property">value</span>); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">value</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">o</span>) &#123;</span><br><span class="line">    o = <span class="number">2</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(o); <span class="comment">//2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">value</span>) <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><h3 id="10-浮点数精度问题"><a href="#10-浮点数精度问题" class="headerlink" title="10. 浮点数精度问题"></a>10. 浮点数精度问题</h3><ol><li>该问题不是ECMAScript独有的问题，ECMAScript使用的是IEEE754标准，浮点数，采用双精度，用64位字节来储存一个浮点数。</li><li>转化为二进制的时候计算的时候 导致了精度丢失，所以0.1 + 0.2 !&#x3D; 0.3</li><li><a href="https://github.com/mqyqingfeng/Blog/issues/155">具体查看</a></li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><code>foo instanceof Foo</code>在语言内部，实际调用的是<code>Foo[Symbol.hasInstance](foo)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="title class_">Foo</span>(...args)</span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Reflect</span>.<span class="title function_">construct</span>(<span class="title class_">Foo</span>, args)</span><br><span class="line"><span class="comment">// 以上两个式子是等价的</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前端基础总结&quot;&gt;&lt;a href=&quot;#前端基础总结&quot; class=&quot;headerlink&quot; title=&quot;前端基础总结&quot;&gt;&lt;/a&gt;前端基础总结&lt;/h2&gt;&lt;p&gt;执行上下文&amp;#x2F;作用域链&amp;#x2F;闭包&lt;/p&gt;
&lt;h3 id=&quot;1-执行上下文&quot;&gt;&lt;a href=&quot;
      
    
    </summary>
    
    
      <category term="js" scheme="http://crywolfx.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>js基础方法</title>
    <link href="http://crywolfx.github.io/2019/07/26/%E6%96%B9%E6%B3%95/"/>
    <id>http://crywolfx.github.io/2019/07/26/方法/</id>
    <published>2019-07-26T02:54:53.000Z</published>
    <updated>2022-07-26T06:26:20.358Z</updated>
    
    <content type="html"><![CDATA[<h2 id="js基础方法"><a href="#js基础方法" class="headerlink" title="js基础方法"></a>js基础方法</h2><h3 id="洗牌算法"><a href="#洗牌算法" class="headerlink" title="洗牌算法"></a>洗牌算法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">shuffle</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> shuffled = [...arr];</span><br><span class="line">    <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">const</span> j = <span class="title class_">Math</span>.<span class="title function_">floor</span>((i + <span class="number">1</span>) * <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">        <span class="keyword">const</span> temp = shuffled[i];</span><br><span class="line">        shuffled[i] = shuffled[j];</span><br><span class="line">        shuffled[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> shuffled;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="随机抽取（洗牌算法延伸）"><a href="#随机抽取（洗牌算法延伸）" class="headerlink" title="随机抽取（洗牌算法延伸）"></a>随机抽取（洗牌算法延伸）</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">funciton <span class="title function_">getRandomArrayElements</span>(<span class="params">arr, count</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> shuffled = [...arr];</span><br><span class="line">    <span class="keyword">const</span> len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; count) &#123;</span><br><span class="line">        count = len;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> min = len - count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = len - <span class="number">1</span>; i &gt;= min; i--) &#123;</span><br><span class="line">        <span class="keyword">const</span> j = <span class="title class_">Math</span>.<span class="title function_">floor</span>((i + <span class="number">1</span>) * <span class="title class_">Math</span>.<span class="title function_">random</span>());</span><br><span class="line">        <span class="keyword">const</span> temp = shuffled[i];</span><br><span class="line">        shuffled[i] = shuffled[j];</span><br><span class="line">        shuffled[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> shuffled.<span class="title function_">slice</span>(min);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> curTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        <span class="comment">// 剩余时间</span></span><br><span class="line">        <span class="keyword">const</span> remaining = delay - (curTime - startTime);</span><br><span class="line">        <span class="comment">// console.log(remaining);</span></span><br><span class="line">        <span class="keyword">const</span> context = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">            startTime = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, delay</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        timeout &amp;&amp; <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(func, delay);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;js基础方法&quot;&gt;&lt;a href=&quot;#js基础方法&quot; class=&quot;headerlink&quot; title=&quot;js基础方法&quot;&gt;&lt;/a&gt;js基础方法&lt;/h2&gt;&lt;h3 id=&quot;洗牌算法&quot;&gt;&lt;a href=&quot;#洗牌算法&quot; class=&quot;headerlink&quot; title=&quot;洗
      
    
    </summary>
    
    
      <category term="js" scheme="http://crywolfx.github.io/tags/js/"/>
    
  </entry>
  
</feed>
